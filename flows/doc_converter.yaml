
id: doc_converter
namespace: controller
tasks:
  - id: file_downloader
    type: io.kestra.plugin.scripts.node.Script
    description: converts docx/word document into pdf and text format.
    beforeCommands:
      - npm i axios mammoth pdfkit jsdom aws-sdk twilio
    script: |
      const axios = require("axios");
      const path = require('path');
      const fs = require("fs");
      const AWS = require("aws-sdk");
      const mammoth = require('mammoth');
      const PDFDocument = require('pdfkit');
      const twilio = require('twilio');
      
      // AWS S3 configuration
      const s3 = new AWS.S3({
          accessKeyId: "{{ secret('AWS_ACCESS_KEY_ID') }}",
          secretAccessKey: "{{ secret('AWS_SECRET_ACCESS_KEY') }}",
          region: "{{ secret('AWS_REGION') }}"
      });

      // Function to download the file from a given URL (e.g., from Twilio)
      const downloadFileFromURL = async (fileUrl, filename, authHeader) => {
          return new Promise(async (resolve, reject) => {
              try {
                  // Ensure the 'downloads' directory exists
                  const downloadsDir = 'downloads';
                  if (!fs.existsSync(downloadsDir)) {
                      fs.mkdirSync(downloadsDir, { recursive: true });
                  }

                  // Send request to get the file and the headers to determine the content type
                  const response = await axios.get(fileUrl, {
                      responseType: 'stream',
                      headers: {
                          Authorization: `Basic ${Buffer.from(authHeader).toString('base64')}`,
                      },
                  });

                  // Determine the file extension based on the Content-Type header
                  const contentType = response.headers['content-type'];

                  // Map content-type to file extensions
                  const mimeTypeToExtension = {
                      'application/vnd.openxmlformats-officedocument.wordprocessingml.document': '.docx',
                      'application/pdf': '.pdf',
                      'text/plain': '.txt',
                      'text/html': '.html',
                  };

                  const fileExtension = mimeTypeToExtension[contentType] || '.bin';
                  const finalFileName = filename + fileExtension;
                  const tempFilePath = path.join(downloadsDir, finalFileName);

                  const writer = fs.createWriteStream(tempFilePath);
                  response.data.pipe(writer);

                  writer.on('finish', () => {
                      console.log(`File downloaded successfully to ${tempFilePath}`);
                      resolve(tempFilePath); // Resolve with the file path
                  });

                  writer.on('error', (err) => {
                      console.error('Error writing file:', err);
                      reject(err);
                  });
              } catch (error) {
                  console.error('Error downloading the file:', error);
                  reject(error);
              }
          });
      };

      // Function to upload file to S3
      const uploadToS3 = async (filePath, bucketName) => {
          const fileContent = fs.readFileSync(filePath);
          const fileName = path.basename(filePath);

          const params = {
              Bucket: bucketName,
              Key: `trash/${fileName}`,
              Body: fileContent
          };

          const data = await s3.upload(params).promise();
          console.log(`File uploaded successfully to ${data.Location}`);
          return data.Location;
      };

      // Conversion functions
      const docxToPdf = async (docxPath, pdfPath) => {
          const docxBuffer = fs.readFileSync(docxPath);
          const { value: text } = await mammoth.extractRawText({ buffer: docxBuffer });

          const pdfDoc = new PDFDocument();
          pdfDoc.pipe(fs.createWriteStream(pdfPath));
          pdfDoc.font('Helvetica').fontSize(12).text(text);
          pdfDoc.end();
      };

      const docxToTxt = async (docxPath, txtPath) => {
          const docxBuffer = fs.readFileSync(docxPath);
          const { value: text } = await mammoth.extractRawText({ buffer: docxBuffer });

          fs.writeFileSync(txtPath, text);
      };

      const docxToHtml = async (docxPath, htmlPath) => {
          const docxBuffer = fs.readFileSync(docxPath);
          const { value: html } = await mammoth.convertToHtml({ buffer: docxBuffer });

          fs.writeFileSync(htmlPath, html);
      };

      // Function to send media with a message using Twilio
      const sendMedia = async (to, url, message = "success!") => {
          try {
              const twilio = require('twilio');
              const client = new twilio(
                  "{{ secret('TWILIO_ACCOUNT_SID') }}",
                  "{{ secret('TWILIO_AUTH_TOKEN') }}"
              );

              console.log("url inside sendMedia: ", url);
              const formattedTo = to.startsWith('whatsapp:') ? to : `whatsapp:${to}`;
              const msg = await client.messages.create({
                  from: 'whatsapp:{{ secret("TWILIO_WHATSAPP_NUMBER") }}',
                  body: message,
                  mediaUrl: url,
                  to: formattedTo,
              });
              console.log(`Message sent successfully! SID: ${msg.sid}`);
          } catch (err) {
              console.error(`Failed to send message: ${err.message}`);
          }
      };


      // Main function
      async function main() {
          try {
              const tbody = {{trigger.body}}; // Replace with actual input handling
              const url = tbody["url"];
              const authHeader = tbody["authHeader"];
              const filename = tbody["filename"];
              const format = tbody["format"];
              const tp = tbody["phone"];
              const bucketName = "{{ secret('S3_BUCKET_NAME') }}";

              // Download the file and get its path
              const downloadedFilePath = await downloadFileFromURL(url, filename, authHeader);

              // Define output file path based on the requested format
              const outputFilePath = downloadedFilePath.replace(/\.\w+$/, `.${format}`);

              // Perform conversion based on the requested format
              if (format === 'pdf') {
                  await docxToPdf(downloadedFilePath, outputFilePath);
              } else if (format === 'txt') {
                  await docxToTxt(downloadedFilePath, outputFilePath);
              } else if (format === 'html') {
                  await docxToHtml(downloadedFilePath, outputFilePath);
              } else {
                  throw new Error(`Unsupported format: ${format}`);
              }

              // Upload the converted file to S3
              const s3FileUrl = await uploadToS3(outputFilePath, bucketName);

              // Send media with the URL to the specified phone number
              await sendMedia(tp, s3FileUrl);
          } catch (error) {
              console.error('Error in main function:', error);
          }
      }

      main();
    taskRunner:
      type: io.kestra.plugin.scripts.runner.docker.Docker
triggers:
  - id: doc
    type: io.kestra.plugin.core.trigger.Webhook
    description: converts the doc file to another formats.
    key: docx
